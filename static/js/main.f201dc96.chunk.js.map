{"version":3,"sources":["components/TodoContent.js","App.js","index.js"],"names":["TodoContent","props","react_default","a","createElement","className","id","type","htmlFor","todoList","map","todo","index","key","onClick","checkActiv","deleteTask","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","prevState","newData","todos","splice","filterTofosFoo","data","state","stateContent","filtersT","filter","checkStatus","task","counter","length","f","condition","newTask","handleChange","bind","assertThisInitialized","handleSubmit","event","target","value","newKey","Date","now","preventDefault","concat","toConsumableArray","text","activ","_this2","filterTodos","onSubmit","placeholder","onChange","components_TodoContent","href","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.f201dc96.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TodoContent(props) {\r\n    \r\n    return (\r\n        \r\n        <section className=\"main\">\r\n            <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" />\r\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\r\n            <ul className=\"todo-list\">\r\n               { props.todoList.map((todo, index) => {\r\n                    return (\r\n                        <li \r\n                            className={ todo['activ'] ? 'activ' : 'completed' } \r\n                            key={ todo['id'] }\r\n                        >\r\n                            <div className='view'>\r\n                                <input \r\n                                    className=\"toggle\" type=\"checkbox\"\r\n                                    onClick={ () => props.checkActiv( index ) }\r\n                                />\r\n                                <label>{ todo['text'] }</label>\r\n                                <button \r\n                                    className=\"destroy\" \r\n                                    onClick={ () => props.deleteTask( index ) }\r\n                                ></button>\r\n                            </div>\r\n                        </li>\r\n                    )\r\n               })}\r\n            </ul>\r\n        </section>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default TodoContent","import React from 'react';\r\n\r\nimport TodoContent from './components/TodoContent';\r\nimport './App.css';\r\n\r\nclass App extends React.Component  {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stateContent: 'all',\r\n            newTask: '',\r\n            todos: [],\r\n          }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        \r\n    };\r\n\r\n    deleteTask = (index) => {\r\n\r\n        this.setState((prevState) => {\r\n            let newData = prevState.todos;\r\n            newData.splice(index, 1)\r\n            return {\r\n                todos : newData\r\n            }\r\n        })\r\n    };\r\n\r\n    filterTofosFoo = () => {\r\n        this.data = this.state.todos;\r\n        if(this.state.stateContent === 'active'){\r\n            this.filtersT = this.data.filter((key) => {\r\n                return key['activ']\r\n            })\r\n            return this.filtersT\r\n        }else if(this.state.stateContent === 'completed'){\r\n            this.filtersT = this.data.filter((key) => {\r\n                return !key['activ']\r\n            })\r\n            return this.filtersT\r\n        }\r\n        \r\n    };\r\n\r\n    checkStatus = (task) => {\r\n        \r\n        let newData = this.state.todos;\r\n        \r\n            newData[task]['activ'] ? \r\n            newData[task]['activ'] = false :\r\n            newData[task]['activ'] = true;\r\n        this.setState({\r\n                todos : newData,\r\n        })\r\n        \r\n    }\r\n\r\n    counter = () => {\r\n\r\n        let data = this.state.todos;\r\n        let test = data.filter((key) => {\r\n            return key['activ']\r\n        })\r\n        return test.length\r\n    }\r\n\r\n    f = (condition) => {\r\n        this.setState({\r\n            stateContent: condition,\r\n        })\r\n    }\r\n\r\n\r\n    handleChange(event) {\r\n        this.setState({newTask: event.target.value});\r\n      }\r\n\r\n    handleSubmit(event) {\r\n        let newKey = Date.now();\r\n        event.preventDefault();\r\n        this.setState({\r\n            todos: [\r\n                ...this.state.todos,\r\n                {\r\n                    id: newKey,\r\n                    text: this.state.newTask,\r\n                    activ: true,\r\n                }\r\n            ],\r\n            newTask: '',\r\n        });\r\n      }\r\n\r\n\r\n\r\n    render(){\r\n        let filterTodos = this.filterTofosFoo();\r\n        \r\n        return (\r\n            <div className=\"App\">\r\n                <section className=\"todoapp\">\r\n    \r\n                    <header className=\"header\">\r\n                        <h1>todos</h1>\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <input className=\"new-todo\"\r\n                                placeholder=\"What needs to be done?\" \r\n                                value={this.state.newTask }\r\n                                onChange={ this.handleChange }\r\n                            />\r\n                        </form>\r\n                    </header>\r\n    \r\n                    <TodoContent \r\n                        todoList={ (this.state.stateContent !== 'all') ? filterTodos : this.state.todos } \r\n                        checkActiv={ this.checkStatus }\r\n                        deleteTask={ this.deleteTask }\r\n                    />\r\n    \r\n                    <footer className=\"footer\" >\r\n                        <span className=\"todo-count\"><strong>{ this.counter() }</strong> items left</span>\r\n                        <ul className=\"filters\">\r\n                            <li>\r\n                                <a href=\"#1\" className={ (this.state.stateContent === 'all') ? \"selected\" : 'none'} onClick={ () => { this.f('all') } }>All</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"#1\" className={ (this.state.stateContent === 'active') ? \"selected\" : 'none'} onClick={ () => { this.f('active') } }>Active</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"#1\" className={ (this.state.stateContent === 'completed') ? \"selected\" : 'none'} onClick={ () => {this.f('completed')} }>Completed</a>\r\n                            </li>\r\n                        </ul>\r\n                        <button className=\"clear-completed\" ></button>\r\n                    </footer>\r\n    \r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}